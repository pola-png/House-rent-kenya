/**
 * @fileoverview Firestore Security Rules for House Rent Kenya.
 *
 * Core Philosophy:
 * This ruleset prioritizes a balance between open data access for properties and strict user-ownership for user profiles.
 * Property listings are publicly readable, but only the owner (landlord) can modify them.
 * User profiles are strictly private and only accessible to the owning user.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile information.
 * - /properties/{propertyId}: Stores publicly readable property listings.
 *
 * Key Security Decisions:
 * - Property listings are publicly readable.
 * - Only the landlord can create, update, or delete their property listings.
 * - Users can only read and write their own profile data.
 * - Listing user documents is disallowed as a general security practice.
 *
 * Denormalization for Authorization:
 * The `properties` collection requires an `landlordId` field on each document. This field stores the UID of the user who owns the property.
 * This denormalization enables efficient owner-only write rules without needing costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile (request.auth.uid == userId).
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Check if the requesting user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to read their own profile.
      allow get: if isOwner(userId);

      // Prevent listing user documents.
      allow list: if false;

      // Allow the user to create their own profile if the UID matches.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow the user to update their own profile if they are the owner and the UID is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow the user to delete their own profile if they are the owner.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read property listings, but only the landlord can create, update, or delete them.
     * @path /properties/{propertyId}
     * @allow (get, list) to anyone.
     * @allow (create) if the landlordId matches the user's UID.
     * @allow (update, delete) if the user is the owner of the property (landlordId matches the user's UID).
     * @deny (create, update, delete) if the user is not the owner of the property.
     * @principle Enforces document ownership for writes.
     */
    match /properties/{propertyId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user is the owner of the document.
      function isOwner(landlordId) {
        return isSignedIn() && request.auth.uid == landlordId;
      }

      function isExistingOwner(landlordId) {
        return isOwner(landlordId) && resource != null;
      }

      // Allow anyone to read property listings.
      allow get, list: if true;

      // Allow the landlord to create a property listing if the landlordId matches.
      allow create: if isSignedIn() && request.resource.data.landlordId == request.auth.uid;

      // Allow the landlord to update a property listing if they are the owner.
      allow update: if isExistingOwner(resource.data.landlordId);

      // Allow the landlord to delete a property listing if they are the owner.
      allow delete: if isExistingOwner(resource.data.landlordId);
    }
  }
}